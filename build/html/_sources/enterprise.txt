基幹システム開発
================

概要
----

ここまでに習得した，チームによるイテレーションサイクルの方法を活かして，本格的な基幹システムを開発します．

今までのトレーニングと異なるのは，グローバルなIPアドレスを持ったサーバに開発したアプリケーションをデプロイすることです．つまり，開発したアプリを実際に「公開」することになります．

サーバ環境
------------

サーバの構築
~~~~~~~~~~~~
仮想OSではなく，実機へのインストールを行います．OSはDVDからインストールします．

サーバのセキュリティ設定が済んだら，グローバルIPを設定します．DNSにも登録可能です．

アカウントの設定
~~~~~~~~~~~~~~~~
デプロイ用にサーバにアカウントを作成します．これには2つのパターンがあります．

* パターン1：1つのデプロイアカウントを共有

  * ディプロイ用のアカウント（'rails'アカウント）に，ディプロイを担当するメンバー全員の公開鍵を登録する

* パターン2：各自のアカウントを作成

  * デプロイを担当するメンバー全員のアカウントを作成し，公開鍵を登録する．

特にサーバにログインして作業する必要がない場合，パターン1にしましょう．

最初の準備
~~~~~~~~~~
まずは，グローバルIPが降られたサーバを1台構築し，そこにアプリケーションをデプロイできるようにしましょう．サーバを構築する手順は，ワークステーションのときの手順と一緒です．

ただし，全員が公開鍵でアクセスできるようにした後，パスワードによるアクセスを禁止してください．グローバルIPはこの作業が終わってから設定してください．

フレームワークについて
----------------------

ここまでのトレーニングでは，Ruby on Railsを利用しましたが，ここから先はお好きなフレームワークを利用して構いません．チームで合意を形成してください．

Ruby on Rails
~~~~~~~~~~~~~

* View

  * Haml

* Test

  * Rspec

Java
~~~~
* Scaffolding

  * `Spring Roo <http://www.springsource.org/spring-roo>`_
  * `Grails <http://grails.org/>`_
  * など

PHP，その他
~~~~~~~~~~~
興味関心・実力にあわせてご自由に．

ただし，初心者には推奨しません（授業担当者に開発経験がない場合，的確なアドバイスはできません）．

Misc
----

- http://nginx.org/
- http://wiki.nginx.org/Main

.. Local Variables:
.. compile-command: "(cd .. && make html)"
.. End:
